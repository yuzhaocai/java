package com.lczy.media.entity;

// Generated 2015-3-27 17:06:05 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Cacheable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;

import com.lczy.media.util.Constants;

/**
 * Media generated by hbm2java
 */
@Entity
@Table(name = "t_media")
@Inheritance(strategy = InheritanceType.JOINED)
@Cacheable
public class Media {

	private String id;
	private Customer customer;
	private Customer organization;
	private MediaStar star;
	private String name;
	private String account;
	private String description;
	private String showPic;
	private String qrCode;
	private String mediaType;
	private String category;
	private String industryType;
	private String region;
	private String products;
	private String tags;
	private Integer fans;
	private String fansNumPic;
	private String fansDir;
	private String createBy;
	private Date createTime;
	private String modifyBy;
	private Date modifyTime;
	private String status;
	private Set<MediaCase> mediaCases = new HashSet<MediaCase>(0);
	private Set<ReqMedia> reqMedias = new HashSet<ReqMedia>(0);
	private Set<MediaQuote> mediaQuotes = new HashSet<MediaQuote>(0);
	private Set<MediaQuoteLog> mediaQuoteLogs = new HashSet<MediaQuoteLog>(0);
	private boolean provideInvoice;
	private String level;
	private int pendingNum;
	private Activity activity;
	private boolean enlisted;
	public Media() {
	}

	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@GeneratedValue(generator = "system-uuid")
	@GenericGenerator(name = "system-uuid", strategy = "uuid")
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CUST_ID", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STAR_ID", nullable = false)
	public MediaStar getStar() {
		return star;
	}

	public void setStar(MediaStar star) {
		this.star = star;
	}

	@Column(name = "NAME", nullable = false, length = 64)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "ACCOUNT", nullable = false, length = 64)
	public String getAccount() {
		return this.account;
	}

	public void setAccount(String account) {
		this.account = account;
	}

	@Column(name = "DESCRIPTION", nullable = false, length = 3000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "SHOW_PIC", length = 256)
	public String getShowPic() {
		return this.showPic;
	}

	public void setShowPic(String showPic) {
		this.showPic = showPic;
	}

	@Column(name = "QR_CODE", length = 256)
	public String getQrCode() {
		return this.qrCode;
	}

	public void setQrCode(String qrCode) {
		this.qrCode = qrCode;
	}

	@Column(name = "MEDIA_TYPE", length = 32)
	public String getMediaType() {
		return this.mediaType;
	}

	public void setMediaType(String mediaType) {
		this.mediaType = mediaType;
	}

	@Column(name = "CATEGORY", length = 32)
	public String getCategory() {
		return this.category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	@Column(name = "INDUSTRY_TYPE", length = 32)
	public String getIndustryType() {
		return this.industryType;
	}

	public void setIndustryType(String industryType) {
		this.industryType = industryType;
	}

	@Column(name = "REGION", nullable = false, length = 32)
	public String getRegion() {
		return this.region;
	}

	public void setRegion(String region) {
		this.region = region;
	}

	@Column(name = "PRODUCTS", length = 300)
	public String getProducts() {
		return this.products;
	}

	public void setProducts(String products) {
		this.products = products;
	}

	@Column(name = "TAGS", length = 300)
	public String getTags() {
		return this.tags;
	}

	public void setTags(String tags) {
		this.tags = tags;
	}

	@Column(name = "FANS")
	public Integer getFans() {
		return this.fans;
	}

	public void setFans(Integer fans) {
		this.fans = fans;
	}
	
	@Column(name = "FANSNUM_PIC", length = 256)
	public String getFansNumPic() {
		return fansNumPic;
	}

	public void setFansNumPic(String fansNumPic) {
		this.fansNumPic = fansNumPic;
	}

	@Column(name = "FANS_DIR", length = 32)
	public String getFansDir() {
		return this.fansDir;
	}

	public void setFansDir(String fansDir) {
		this.fansDir = fansDir;
	}

	@Column(name = "CREATE_BY", length = 32)
	public String getCreateBy() {
		return this.createBy;
	}

	public void setCreateBy(String createBy) {
		this.createBy = createBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", nullable = false, length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Column(name = "MODIFY_BY", length = 32)
	public String getModifyBy() {
		return this.modifyBy;
	}

	public void setModifyBy(String modifyBy) {
		this.modifyBy = modifyBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFY_TIME", nullable = false, length = 19)
	public Date getModifyTime() {
		return this.modifyTime;
	}

	public void setModifyTime(Date modifyTime) {
		this.modifyTime = modifyTime;
	}

	@Column(name = "STATUS", length = 32)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "media", cascade = {CascadeType.PERSIST, CascadeType.REMOVE})
	public Set<MediaCase> getMediaCases() {
		return this.mediaCases;
	}

	public void setMediaCases(Set<MediaCase> mediaCases) {
		this.mediaCases = mediaCases;
	}


	@OneToMany(fetch = FetchType.LAZY, mappedBy = "media")
	public Set<ReqMedia> getReqMedias() {
		return this.reqMedias;
	}

	public void setReqMedias(Set<ReqMedia> reqMedias) {
		this.reqMedias = reqMedias;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "media", cascade = {CascadeType.PERSIST, CascadeType.REMOVE})
	@OrderBy("price ASC")
	public Set<MediaQuote> getMediaQuotes() {
		return this.mediaQuotes;
	}

	public void setMediaQuotes(Set<MediaQuote> mediaQuotes) {
		this.mediaQuotes = mediaQuotes;
	}
	
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "media", cascade = {CascadeType.PERSIST, CascadeType.REMOVE})
	public Set<MediaQuoteLog> getMediaQuoteLogs() {
		return mediaQuoteLogs;
	}

	public void setMediaQuoteLogs(Set<MediaQuoteLog> mediaQuoteLogs) {
		this.mediaQuoteLogs = mediaQuoteLogs;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ORG_ID")
	public Customer getOrganization() {
		return organization;
	}

	public void setOrganization(Customer organization) {
		this.organization = organization;
	}

	@Column(name="PROVIDE_INVOICE")
	public boolean isProvideInvoice() {
		return provideInvoice;
	}

	public void setProvideInvoice(boolean provideInvoice) {
		this.provideInvoice = provideInvoice;
	}

	@Column(name = "LEVEL")
	public String getLevel() {
		return this.level;
	}

	public void setLevel(String level) {
		this.level = level;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ACTIVITY_ID")
	public Activity getActivity() {
		return activity;
	}

	public void setActivity(Activity activity) {
		this.activity = activity;
	}

	@Transient
	public int getPendingNum() {
		int res = 0;
		if (reqMedias != null && reqMedias.size() > 0) {
			for (ReqMedia reqM : reqMedias) {
				if (reqM.getFbStatus().equals(Constants.MediaFeedback.NULL))
					res++;
			}
		}
		pendingNum = res;

		return pendingNum;
	}

	public void setPendingNum(int pendingNum) {
		this.pendingNum = pendingNum;
	}
	
	@Transient
	public boolean isEnlisted() {
		return enlisted;
	}

	public void setEnlisted(boolean enlisted) {
		this.enlisted = enlisted;
	}
	
	@Transient
	public boolean isActivitying() {
		Activity activity = getActivity();
		if (activity == null) {
			return false;
		}
		
		if (activity.getStatus().equals(Constants.ActivityStatus.INACTIVE)) {
			return false;
		}
		
		Date now = new Date();
		if (activity.getStartTime().after(now)) {
			return false;
		}
		
		if (activity.getEndTime() != null && activity.getEndTime().before(now)) {
			return false;
		}
		
		return true;
	}
	
	@Override
	public String toString() {
		return "Media [id=" + id + ", customer=" + customer + ", organization=" + organization + ", star=" + star + ", name=" + name
				+ ", description=" + description + ", showPic=" + showPic + ", qrCode=" + qrCode + ", mediaType="
				+ mediaType + ", category=" + category + ", industryType=" + industryType + ", region=" + region
				+ ", products=" + products + ", tags=" + tags + ", fans=" + fans + ", fansDir=" + fansDir
				+ ", createBy=" + createBy + ", createTime=" + createTime + ", modifyBy=" + modifyBy + ", modifyTime="
				+ modifyTime + ", status=" + status + ", mediaCases=" + mediaCases + ", reqMedias=" + reqMedias
				+ ", mediaQuotes=" + mediaQuotes + ", provideInvoice=" + provideInvoice + ", level=" + level + "]";
	}
	
}
