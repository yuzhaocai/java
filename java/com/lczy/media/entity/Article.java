package com.lczy.media.entity;

// Generated 2015-5-4 16:20:05 by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.jsoup.Jsoup;

/**
 * Article generated by hbm2java
 */
@Entity
@Table(name = "t_article")
@Cacheable
public class Article implements java.io.Serializable {
	
	private static final long serialVersionUID = -438393502032458588L;
	
	private String id;
	private String title;
	private String content;
	private String author;
	private String source;
	private Customer customer;
	private String status;
	private String visable;
	private String url;
	private Integer click = new Integer(0);
	private String createBy;
	private Date createTime;
	private String modifyBy;
	private Date modifyTime;
	
	private String summary;

	public Article() {
	}


	@Id
	@Column(name = "ID", unique = true, nullable = false, length = 32)
	@GeneratedValue(generator = "system-uuid")
	@GenericGenerator(name = "system-uuid", strategy = "uuid")
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@Column(name = "TITLE", nullable = false, length = 128)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "CONTENT", nullable = false)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name = "AUTHOR", length = 128)
	public String getAuthor() {
		return this.author;
	}

	public void setAuthor(String author) {
		this.author = author;
	}

	@Column(name = "SOURCE", length = 128)
	public String getSource() {
		return this.source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name = "CUST_ID", nullable = false)
	public Customer getCustomer() {
		return this.customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	@Column(name = "STATUS", nullable = false, length = 32)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "VISABLE", nullable = false, length = 32)
	public String getVisable() {
		return this.visable;
	}

	public void setVisable(String visable) {
		this.visable = visable;
	}

	@Column(name = "URL", length = 256)
	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	@Column(name = "CLICK")
	public Integer getClick() {
		return this.click;
	}

	public void setClick(Integer click) {
		this.click = click;
	}

	@Column(name = "CREATE_BY", nullable = false)
	public String getCreateBy() {
		return this.createBy;
	}

	public void setCreateBy(String createBy) {
		this.createBy = createBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATE_TIME", nullable = false, length = 19)
	public Date getCreateTime() {
		return this.createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	@Column(name = "MODIFY_BY", nullable = false)
	public String getModifyBy() {
		return this.modifyBy;
	}

	public void setModifyBy(String modifyBy) {
		this.modifyBy = modifyBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFY_TIME", nullable = false, length = 19)
	public Date getModifyTime() {
		return this.modifyTime;
	}

	public void setModifyTime(Date modifyTime) {
		this.modifyTime = modifyTime;
	}

	@Transient
	public String getSummary() {
		if (summary == null && content != null) {
			String txt = Jsoup.parse(content).body().text();
			int len = 30;
			int idx = txt.indexOf('ã€‚');
			if (idx > 0) {
				summary = txt.substring(0, idx);
			} else {
				summary = txt.substring(0, Math.min(len, txt.length()));
			}
			if (txt.length() > len) {
				summary += "...";
			}
		}
		return summary;
	}

	
}
