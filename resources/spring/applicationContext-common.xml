<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:c="http://www.springframework.org/schema/c"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xmlns:jpa="http://www.springframework.org/schema/data/jpa"
        xmlns:lang="http://www.springframework.org/schema/lang"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:task="http://www.springframework.org/schema/task"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd"
        default-lazy-init="true">
		
	<description>spring 公共设置</description>
	
	<bean class="com.lczy.common.util.PropertyUtils" lazy-init="false">
	   <property name="locations">
	       <array>
		       <value>classpath:properties/application.properties</value>
		       <value>classpath:properties/jdbc.properties</value>
	       </array>
	   </property>
	</bean>
	
	<util:properties id="application" location="classpath:properties/application.properties" />
	
	<bean class="com.lczy.common.util.SpringUtils" lazy-init="false"/>
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
		
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="3" />
        <!-- 连接池最小连接数 -->
        <property name="minPoolSize" value="9" />
        <!-- 连接池最大连接数 -->
        <property name="maxPoolSize" value="300" />
        
        <!--最大空闲时间, 120秒内未使用则连 接被丢弃。若为0则永不丢弃。Default: 0 --> 
        <property name="maxIdleTime" value="120" />
        
        <!-- 如果此值为非零，则检出的连接超出此时间（单位：秒）未返回连接池，则物理关闭此连接！此值要小心设置！！！ -->
        <property name="unreturnedConnectionTimeout" value="1800" />
        
        <!--
            JDBC的标准参数，用以控制数据源内加载的 PreparedStatements数量。但由于预缓存的statements 
		    属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
		    如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。 Default: 0
        --> 
        <property name="maxStatements" value="0" />
        <property name="maxStatementsPerConnection" value="100" />
        
        <!--每 n 秒检查所有连接池中的空闲连接。Default: 0 --> 
        <property name="idleConnectionTestPeriod" value="0" />
        
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 --> 
        <property name="acquireIncrement" value="3" />
        
        <!--取新连接失败后重试次数;2880次，每次30秒，正好是24小时。 Default: 30 -->
        <property name="acquireRetryAttempts" value="28800" />
        
        <!--连接间隔时间，单位毫秒。Default: 1000 -->
        <property name="acquireRetryDelay" value="3000" />
        
        <!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，
		     并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。
            Default: false
        -->
        <property name="breakAfterAcquireFailure" value="false" />
        
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个 connection提交的 时候都将校验其有效性。
		    建议使用 idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。
            Default: false 
        -->
        <property name="testConnectionOnCheckout" value="false" />
        
        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,
		    如设为0则无限期等待。单位毫秒。Default: 0 
        --> 
        <property name="checkoutTimeout" value="2000" />
        
        <property name="autoCommitOnClose" value="false" />
        
	</bean>
	
	<bean id="dataSourceP6Spy" class="com.p6spy.engine.spy.P6DataSource" >
       <constructor-arg>
           <ref bean="dataSource"/>
       </constructor-arg>
	</bean>
	
	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="packagesToScan" value="com.lczy.media.entity"/>
		<property name="dataSource" ref="${datasource.name}"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${hibernate.show_sql}" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
            	<prop key="hibernate.id.new_generator_mappings">true</prop><!-- 使用新的 TableGenerator -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
            	<prop key="hibernate.format_sql">false</prop>  
            	<prop key="hibernate.use_sql_comments">true</prop>  
            	<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>  
            	<prop key="hibernate.hbm2ddl.auto">none</prop>
            	<!-- cache settings -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
            	<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">/spring/ehcache.xml</prop>
            	<!-- 使用redis做为二级缓存
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.redis.SingletonRedisRegionFactory</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">properties/cache-redis.properties</prop>
            	-->
			</props>
		</property>
	</bean>
	
	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.lczy">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
	<!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
 	<jpa:repositories base-package="com.lczy.media.repositories" factory-class="com.lczy.common.data.MyRepositoryFactoryBean"
 		transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
	
	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- hibernate validator -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->  
        <property name="validationMessageSource" ref="messageSource"/> 
	</bean>
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">  
        <property name="basename" value="classpath:messages"/>
        <property name="fileEncodings" value="utf-8"/>
        <property name="cacheSeconds" value="120"/>
	</bean>
	
	<!-- 集成 dozer  -->
	<bean id="dozer" class="org.dozer.spring.DozerBeanMapperFactoryBean">
		<property name="mappingFiles" 
			value="classpath*:/com/lczy/media/vo/*-mapping.xml" />
	</bean>
	
	<bean class="com.lczy.common.util.BeanMapper" lazy-init="false">
		<property name="dozer" ref="dozer" />
	</bean>
	
	<bean class="com.lczy.media.util.FileServerUtils" lazy-init="false">
		<property name="appId"     value="${file.server.appid}" />
		<property name="appKey"    value="${file.server.appkey}" />
		<property name="serverUrl" value="${file.server.url}" />
	</bean>

</beans>